{"version":3,"file":"aggregate-root.js","sourceRoot":"","sources":["../src/aggregate-root.ts"],"names":[],"mappings":"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","sourcesContent":["import { DomainEvent } from \"./domain-event\";\nimport { AggregateState } from \"./aggregate-state\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport { ApplicationException } from \"@nivinjoseph/n-exception\";\nimport { AggregateRootData } from \"./aggregate-root-data\";\nimport \"@nivinjoseph/n-ext\";\nimport { DomainContext } from \"./domain-context\";\nimport { DomainEventData } from \"./domain-event-data\";\n\n// public\nexport abstract class AggregateRoot<T extends AggregateState>\n{\n    private readonly _domainContext: DomainContext;\n    private readonly _state: T;\n    private _retroEvents: ReadonlyArray<DomainEvent<T>>;\n    private readonly _retroVersion: number;\n    private readonly _currentEvents = new Array<DomainEvent<T>>(); // track unit of work stuff\n    private readonly _isNew: boolean = false;\n\n\n    public get id(): string { return this._state.id; }\n    \n    public get retroEvents(): ReadonlyArray<DomainEvent<T>> { return this._retroEvents.orderBy(t => t.version); }\n    public get retroVersion(): number { return this._retroVersion; } \n    \n    public get currentEvents(): ReadonlyArray<DomainEvent<T>> { return this._currentEvents.orderBy(t => t.version); }\n    public get currentVersion(): number { return this._state.version; }\n    \n    public get events(): ReadonlyArray<DomainEvent<T>> { return [...this._retroEvents, ...this._currentEvents].orderBy(t => t.version); }\n    public get version(): number { return this.currentVersion; }\n    \n    public get createdAt(): number { return this._state.createdAt; }\n    public get updatedAt(): number { return this._state.updatedAt; }\n\n    public get isNew(): boolean { return this._isNew; } // this will always be false for anything that is reconstructed\n    public get hasChanges(): boolean { return this.currentVersion !== this.retroVersion; }\n\n    protected get context(): DomainContext { return this._domainContext; }\n    protected get state(): T { return this._state; }\n\n\n    public constructor(domainContext: DomainContext, events: ReadonlyArray<DomainEvent<T>>, initialState?: T | object)\n    {\n        given(domainContext, \"domainContext\").ensureHasValue()\n            .ensureHasStructure({ userId: \"string\" });\n        this._domainContext = domainContext;\n        \n        given(initialState, \"initialState\").ensureIsObject();\n        this._state = initialState || {} as any;\n        \n        if (this._state.version)\n        {\n            given(events, \"events\").ensureHasValue().ensureIsArray()\n                .ensure(t => t.length === 0, \"no events should be passed when constructing from snapshot\");\n            this._retroEvents = [];\n        }\n        else\n        {\n            given(events, \"events\").ensureHasValue().ensureIsArray()\n                .ensure(t => t.length > 0, \"no events passed\")\n                .ensure(t => t.some(u => u.isCreatedEvent), \"no created event passed\")\n                .ensure(t => t.count(u => u.isCreatedEvent) === 1, \"more than one created event passed\");\n            this._retroEvents = events;\n            if (this._retroEvents.some(t => t.aggregateId == null))\n                this._isNew = true;\n            this._retroEvents.orderBy(t => t.version).forEach(t => t.apply(this, this._domainContext, this._state));\n        }\n        \n        this._retroVersion = this.currentVersion;\n    }\n\n    public static deserializeFromEvents(domainContext: DomainContext, aggregateType: Function, eventTypes: ReadonlyArray<Function>, eventData: ReadonlyArray<DomainEventData>): AggregateRoot<AggregateState>\n    {\n        given(domainContext, \"domainContext\").ensureHasValue().ensureHasStructure({ userId: \"string\" });\n        given(aggregateType, \"aggregateType\").ensureHasValue().ensureIsFunction();\n        given(eventTypes, \"eventTypes\").ensureHasValue().ensureIsArray()\n            .ensure(t => t.length > 0, \"no eventTypes provided\")\n            .ensure(t => t.map(u => (<Object>u).getTypeName()).distinct().length === t.length, \"duplicate event types detected\");\n        given(eventData, \"eventData\").ensureHasValue().ensureIsArray().ensure(t => t.length > 0);\n        \n        \n        // given(data, \"data\").ensureHasValue().ensureIsObject()\n        //     .ensureHasStructure({\n        //         $id: \"string\",\n        //         $version: \"number\",\n        //         $createdAt: \"number\",\n        //         $updatedAt: \"number\",\n        //         $events: [{\n        //             $aggregateId: \"string\",\n        //             $id: \"string\",\n        //             $userId: \"string\",\n        //             $name: \"string\",\n        //             $occurredAt: \"number\",\n        //             $version: \"number\",\n        //             $isCreatedEvent: \"boolean\"\n        //         }]\n        //     });\n        \n        const deserializedEvents = eventData.map((eventData) =>\n        {\n            const name = eventData.$name;\n            const event = eventTypes.find(t => (<Object>t).getTypeName() === name);\n            if (!event)\n                throw new ApplicationException(`No event type supplied for event with name '${name}'`);\n            if (!(<any>event).deserializeEvent)\n                throw new ApplicationException(`Event type '${name}' does not have a static deserializeEvent method defined.`);\n            return (<any>event).deserializeEvent(eventData);\n        });\n        \n        return new (<any>aggregateType)(domainContext, deserializedEvents);\n    }\n    \n    \n    public static deserializeFromSnapshot(domainContext: DomainContext, aggregateType: Function, stateSnapshot: AggregateState | object): AggregateRoot<AggregateState>\n    {\n        given(domainContext, \"domainContext\").ensureHasValue().ensureHasStructure({ userId: \"string\" });\n        given(aggregateType, \"aggregateType\").ensureHasValue().ensureIsFunction();\n        \n        given(stateSnapshot, \"stateSnapshot\").ensureHasValue().ensureIsObject()\n            .ensureHasStructure({\n                id: \"string\",\n                version: \"number\",\n                createdAt: \"number\",\n                updatedAt: \"number\"\n            });\n        \n        return new (<any>aggregateType)(domainContext, [], stateSnapshot);\n    }\n\n\n    public serialize(): AggregateRootData\n    {\n        return {\n            $id: this.id,\n            $version: this.version,\n            $createdAt: this.createdAt,\n            $updatedAt: this.updatedAt,\n            $events: this.events.map(t => t.serialize())\n        };\n    }\n    \n    public snapshot(): T | object\n    {\n        const snapshot: any = Object.assign({}, this.state);\n        \n        Object.keys(snapshot).forEach(key =>\n        {\n            const val = snapshot[key];\n            if (val && typeof (val) === \"object\")\n            {\n                if (Array.isArray(val))\n                    snapshot[key] = (<Array<Object>>val).map(t => this.serializeForSnapshot(t));\n                else\n                    snapshot[key] = this.serializeForSnapshot(val);\n            }\n        });\n        \n        return snapshot;\n    }\n\n    public constructVersion(version: number): this\n    {\n        given(version, \"version\").ensureHasValue().ensureIsNumber()\n            .ensure(t => t > 0 && t <= this.version, `version must be > 0 and <= ${this.version} (current version)`);\n        \n        given(this, \"this\").ensure(t => t.retroEvents.length > 0, \"constructing version without retro events\");\n\n        const ctor = (<Object>this).constructor;\n        return new (<any>ctor)(this._domainContext, this.events.filter(t => t.version <= version));\n    }\n\n    public hasEventOfType(eventType: Function): boolean\n    {\n        given(eventType, \"eventType\").ensureHasValue().ensureIsFunction();\n\n        const eventTypeName = (<Object>eventType).getTypeName();\n        return this.events.some(t => t.name === eventTypeName);\n    }\n\n    public hasRetroEventOfType(eventType: Function): boolean\n    {\n        given(eventType, \"eventType\").ensureHasValue().ensureIsFunction();\n\n        const eventTypeName = (<Object>eventType).getTypeName();\n        return this._retroEvents.some(t => t.name === eventTypeName);\n    }\n\n    public hasCurrentEventOfType(eventType: Function): boolean\n    {\n        given(eventType, \"eventType\").ensureHasValue().ensureIsFunction();\n\n        const eventTypeName = (<Object>eventType).getTypeName();\n        return this._currentEvents.some(t => t.name === eventTypeName);\n    }\n\n    public getEventsOfType<TEventType extends DomainEvent<T>>(eventType: Function): ReadonlyArray<TEventType> \n    {\n        given(eventType, \"eventType\").ensureHasValue().ensureIsFunction();\n\n        const eventTypeName = (<Object>eventType).getTypeName();\n        return this.events.filter(t => t.name === eventTypeName) as any;\n    }\n\n    public getRetroEventsOfType<TEventType extends DomainEvent<T>>(eventType: Function): ReadonlyArray<TEventType> \n    {\n        given(eventType, \"eventType\").ensureHasValue().ensureIsFunction();\n\n        const eventTypeName = (<Object>eventType).getTypeName();\n        return this._retroEvents.filter(t => t.name === eventTypeName) as any;\n    }\n\n    public getCurrentEventsOfType<TEventType extends DomainEvent<T>>(eventType: Function): ReadonlyArray<TEventType> \n    {\n        given(eventType, \"eventType\").ensureHasValue().ensureIsFunction();\n\n        const eventTypeName = (<Object>eventType).getTypeName();\n        return this._currentEvents.filter(t => t.name === eventTypeName) as any;\n    }\n    \n\n    protected applyEvent(event: DomainEvent<AggregateState>): void\n    {\n        event.apply(this, this._domainContext, this._state);\n\n        this._currentEvents.push(event);\n \n        if (this._retroEvents.length > 0)\n        {\n            const trimmed = this.trim(this._retroEvents.orderBy(t => t.version)).orderBy(t => t.version);\n            given(trimmed, \"trimmed\").ensureHasValue().ensureIsArray()\n                .ensure(t => t.length > 0, \"cannot trim all retro events\")\n                .ensure(t => t.length <= this._retroEvents.length, \"only contraction is allowed\")\n                .ensure(t => t.some(u => u.isCreatedEvent), \"cannot trim created event\")\n                .ensure(t => t.count(u => u.isCreatedEvent) === 1, \"cannot add new created events\")\n                .ensure(t => t.every(u => this._retroEvents.contains(u)), \"cannot add new events\")\n                ;\n\n            this._retroEvents = trimmed;\n        }\n    }\n    // override\n    protected trim(retroEvents: ReadonlyArray<DomainEvent<T>>): ReadonlyArray<DomainEvent<T>>\n    {\n        given(retroEvents, \"retroEvents\").ensureHasValue().ensureIsArray().ensure(t => t.length > 0);\n        \n        return retroEvents;\n    }\n    \n    \n    private serializeForSnapshot(value: Object): object\n    {\n        given(value, \"value\").ensureHasValue().ensureIsObject()\n            .ensure(t => t.hasOwnProperty(\"serialize\"), `serialize method is missing on type ${value.getTypeName()}`)\n            .ensure(t => typeof ((<any>t).serialize) === \"function\", `property serialize on type ${value.getTypeName()} is not a function`);\n\n        return (<any>value).serialize();\n    }\n}"]}