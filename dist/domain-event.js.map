{"version":3,"file":"domain-event.js","sourceRoot":"","sources":["../src/domain-event.ts"],"names":[],"mappings":"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","sourcesContent":["import { AggregateState } from \"./aggregate-state\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport { DomainEventData } from \"./domain-event-data\";\nimport \"@nivinjoseph/n-ext\";\nimport { DomainHelper, AggregateRoot } from \".\";\nimport { DomainContext } from \"./domain-context\";\nimport { ApplicationException } from \"@nivinjoseph/n-exception\";\n\n// public\nexport abstract class DomainEvent<T extends AggregateState>\n{\n    private _aggregateId: string | null;\n    private _id: string | null; // _aggregateId-_version\n    private _userId: string | null; // who\n    private readonly _name: string; // what\n    private readonly _occurredAt: number; // when\n    private _version: number;\n    private readonly _isCreatedEvent: boolean;\n\n\n    public get aggregateId(): string | null { return this._aggregateId; }\n    public get id(): string { return this._id as string; }\n    public get userId(): string | null { return this._userId; }\n    public get name(): string { return this._name; }\n    public get occurredAt(): number { return this._occurredAt; }\n    public get version(): number { return this._version; }\n    public get isCreatedEvent(): boolean { return this._isCreatedEvent; }\n\n    // occurredAt is epoch milliseconds\n    // public constructor(user: string, occurredAt: number = DomainHelper.now, version: number = 0)\n    public constructor(data: DomainEventData)\n    {\n        given(data, \"data\").ensureHasValue()\n            .ensureHasStructure({\n                \"$aggregateId?\": \"string\",\n                \"$id?\": \"string\",\n                \"$userId?\": \"string\",\n                \"$name?\": \"string\",\n                \"$occurredAt?\": \"number\",\n                \"$version?\": \"number\",\n                \"$isCreatedEvent?\": \"boolean\"\n            });\n\n        this._aggregateId = data.$aggregateId || null;\n        this._id = data.$id || null;\n        this._userId = data.$userId && !data.$userId.isEmptyOrWhiteSpace() ? data.$userId.trim() : null;\n        this._name = (<Object>this).getTypeName();\n        if (data.$name && data.$name !== this._name)\n            throw new ApplicationException(`Deserialized event name '${data.$name}' does not match target type name '${this._name}'.`);\n        this._occurredAt = data.$occurredAt || DomainHelper.now;\n        this._version = data.$version || 0;\n        this._isCreatedEvent = !!data.$isCreatedEvent;\n    }\n\n\n    public apply(aggregate: AggregateRoot<T>, domainContext: DomainContext, state: T): void\n    {\n        given(aggregate, \"aggregate\").ensureHasValue().ensureIsObject().ensure(t => t instanceof AggregateRoot);\n        given(domainContext, \"domainContext\").ensureHasValue().ensureHasStructure({ userId: \"string\" });\n        given(state, \"state\").ensureHasValue().ensureIsObject();\n\n        if (this._userId == null)\n            this._userId = domainContext.userId;\n        \n        const version = this._version || (state.version + 1) || 1;\n        \n        this.applyEvent(state as T);\n        \n        if (this._isCreatedEvent)\n            state.createdAt = this._occurredAt;\n        \n        state.updatedAt = this._occurredAt;\n        \n        if (aggregate.id == null)\n            throw new ApplicationException(\"Created event is not setting the id of the aggregate\");\n\n        if (this._aggregateId != null && this._aggregateId !== aggregate.id)\n            throw new ApplicationException(`Event of type '${this._name}' with id ${this._id} and aggregateId '${this._aggregateId}' is being applied on Aggregate of type '${(<Object>aggregate).getTypeName()}' with id '${aggregate.id}'`);\n        this._aggregateId = aggregate.id;\n        \n        state.version = this._version = version;\n        \n        const id = `${this._aggregateId}-${this._version}`;\n        if (this._id != null && this._id !== id)\n            throw new ApplicationException(`Deserialized id '${this._id}' does not match computed id ${id}`);\n        this._id = id;\n    }\n\n    public serialize(): DomainEventData\n    {\n        return Object.assign(this.serializeEvent(), {\n            $aggregateId: this._aggregateId,\n            $id: this._id,\n            $userId: this._userId,\n            $name: this._name,\n            $occurredAt: this._occurredAt,\n            $version: this._version,\n            $isCreatedEvent: this._isCreatedEvent\n        });\n    }\n\n\n    protected abstract serializeEvent(): object;\n    protected abstract applyEvent(state: T): void;\n}"]}