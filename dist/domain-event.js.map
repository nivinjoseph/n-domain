{"version":3,"file":"domain-event.js","sourceRoot":"","sources":["../src/domain-event.ts"],"names":[],"mappings":";;AACA,0DAAiD;AAEjD,8BAA4B;AAC5B,wBAAiC;AAGjC,MAAsB,WAAW;IAe7B,YAAmB,IAAqB;QAEpC,mBAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,cAAc,EAAE;aAC/B,kBAAkB,CAAC;YAChB,KAAK,EAAE,QAAQ;YACf,QAAQ,EAAE,QAAQ;YAClB,cAAc,EAAE,QAAQ;YACxB,WAAW,EAAE,QAAQ;SACxB,CAAC,CAAC;QAEP,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,KAAK,GAAY,IAAK,CAAC,WAAW,EAAE,CAAC;QAC1C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,eAAY,CAAC,GAAG,CAAC;QACxD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC;IACvC,CAAC;IArBD,IAAW,IAAI,KAAa,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAChD,IAAW,IAAI,KAAa,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAChD,IAAW,UAAU,KAAa,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IAC5D,IAAW,OAAO,KAAa,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAqB/C,KAAK,CAAC,KAAQ;QAEjB,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAExD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,OAAO,IAAI,CAAC,CAAC;QAEnC,IAAI,CAAC,UAAU,CAAC,KAAU,CAAC,CAAC;QAE5B,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;IACtC,CAAC;IAEM,SAAS;QAEZ,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE;YACxC,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;SAC1B,CAAC,CAAC;IACP,CAAC;CAKJ;AAxDD,kCAwDC","sourcesContent":["import { AggregateState } from \"./aggregate-state\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport { DomainEventData } from \"./domain-event-data\";\nimport \"@nivinjoseph/n-ext\";\nimport { DomainHelper } from \".\";\n\n// public\nexport abstract class DomainEvent<T extends AggregateState>\n{\n    private readonly _user: string; // who\n    private readonly _name: string; // what\n    private readonly _occurredAt: number; // when\n    private _version: number;\n\n\n    public get user(): string { return this._user; }\n    public get name(): string { return this._name; }\n    public get occurredAt(): number { return this._occurredAt; }\n    public get version(): number { return this._version; }\n\n    // occurredAt is epoch milliseconds\n    // public constructor(user: string, occurredAt: number = DomainHelper.now, version: number = 0)\n    public constructor(data: DomainEventData)\n    {\n        given(data, \"data\").ensureHasValue()\n            .ensureHasStructure({\n                $user: \"string\",\n                \"$name?\": \"string\",\n                \"$occurredAt?\": \"number\",\n                \"$version?\": \"number\"\n            });\n\n        this._user = data.$user;\n        this._name = (<Object>this).getTypeName();\n        this._occurredAt = data.$occurredAt || DomainHelper.now;\n        this._version = data.$version || 0;\n    }\n\n\n    public apply(state: T): void\n    {\n        given(state, \"state\").ensureHasValue().ensureIsObject();\n\n        this._version = state.version || 0; // the version of the state before the application of the event => becomes the version of the event\n\n        this.applyEvent(state as T);\n\n        state.version = this._version + 1;\n    }\n\n    public serialize(): DomainEventData\n    {\n        return Object.assign(this.serializeEvent(), {\n            $user: this._user,\n            $name: this._name,\n            $occurredAt: this._occurredAt,\n            $version: this._version\n        });\n    }\n\n\n    protected abstract serializeEvent(): object;\n    protected abstract applyEvent(state: T): void;\n}"]}