import { DomainEvent } from "./domain-event";
import { AggregateState } from "./aggregate-state";
import { AggregateRootData } from "./aggregate-root-data";
import "@nivinjoseph/n-ext";
import { DomainContext } from "./domain-context";
import { DomainEventData } from "./domain-event-data";
import { AggregateStateFactory } from "./aggregate-state-factory";
export declare abstract class AggregateRoot<T extends AggregateState> {
    private readonly _domainContext;
    private readonly _stateFactory;
    private readonly _state;
    private _retroEvents;
    private readonly _retroVersion;
    private readonly _currentEvents;
    private readonly _isNew;
    get id(): string;
    get retroEvents(): ReadonlyArray<DomainEvent<T>>;
    get retroVersion(): number;
    get currentEvents(): ReadonlyArray<DomainEvent<T>>;
    get currentVersion(): number;
    get events(): ReadonlyArray<DomainEvent<T>>;
    get version(): number;
    get createdAt(): number;
    get updatedAt(): number;
    get isNew(): boolean;
    get hasChanges(): boolean;
    protected get context(): DomainContext;
    protected get state(): T;
    constructor(domainContext: DomainContext, events: ReadonlyArray<DomainEvent<T>>, stateFactory: AggregateStateFactory<T>, currentState?: T);
    static deserializeFromEvents(domainContext: DomainContext, aggregateType: Function, eventTypes: ReadonlyArray<Function>, eventData: ReadonlyArray<DomainEventData>): AggregateRoot<AggregateState>;
    serialize(): AggregateRootData;
    static deserializeFromSnapshot(domainContext: DomainContext, aggregateType: Function, stateFactory: AggregateStateFactory<any>, stateSnapshot: AggregateState | object): AggregateRoot<AggregateState>;
    snapshot(...cloneKeys: string[]): T | object;
    constructVersion(version: number): this;
    hasEventOfType(eventType: Function): boolean;
    hasRetroEventOfType(eventType: Function): boolean;
    hasCurrentEventOfType(eventType: Function): boolean;
    getEventsOfType<TEventType extends DomainEvent<T>>(eventType: Function): ReadonlyArray<TEventType>;
    getRetroEventsOfType<TEventType extends DomainEvent<T>>(eventType: Function): ReadonlyArray<TEventType>;
    getCurrentEventsOfType<TEventType extends DomainEvent<T>>(eventType: Function): ReadonlyArray<TEventType>;
    test(): void;
    protected applyEvent(event: DomainEvent<AggregateState>): void;
    private serializeForSnapshot;
}
