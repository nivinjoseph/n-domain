import { DomainEvent } from "./domain-event";
import { AggregateState } from "./aggregate-state";
import { AggregateRootData } from "./aggregate-root-data";
import "@nivinjoseph/n-ext";
import { DomainContext } from "./domain-context";
import { DomainEventData } from "./domain-event-data";
export declare abstract class AggregateRoot<T extends AggregateState> {
    private readonly _domainContext;
    private readonly _state;
    private _retroEvents;
    private readonly _retroVersion;
    private readonly _currentEvents;
    private readonly _isNew;
    readonly id: string;
    readonly retroEvents: ReadonlyArray<DomainEvent<T>>;
    readonly retroVersion: number;
    readonly currentEvents: ReadonlyArray<DomainEvent<T>>;
    readonly currentVersion: number;
    readonly events: ReadonlyArray<DomainEvent<T>>;
    readonly version: number;
    readonly createdAt: number;
    readonly updatedAt: number;
    readonly isNew: boolean;
    readonly hasChanges: boolean;
    protected readonly context: DomainContext;
    protected readonly state: T;
    constructor(domainContext: DomainContext, events: ReadonlyArray<DomainEvent<T>>, initialState?: T | object);
    static deserializeFromEvents(domainContext: DomainContext, aggregateType: Function, eventTypes: ReadonlyArray<Function>, eventData: ReadonlyArray<DomainEventData>): AggregateRoot<AggregateState>;
    static deserializeFromSnapshot(domainContext: DomainContext, aggregateType: Function, stateSnapshot: AggregateState | object): AggregateRoot<AggregateState>;
    serialize(): AggregateRootData;
    snapshot(): T | object;
    constructVersion(version: number): this;
    protected applyEvent(event: DomainEvent<AggregateState>): void;
    protected hasEventOfType(eventType: Function): boolean;
    protected hasRetroEventOfType(eventType: Function): boolean;
    protected hasCurrentEventOfType(eventType: Function): boolean;
    protected getEventsOfType<TEventType extends DomainEvent<T>>(eventType: Function): ReadonlyArray<TEventType>;
    protected getRetroEventsOfType<TEventType extends DomainEvent<T>>(eventType: Function): ReadonlyArray<TEventType>;
    protected getCurrentEventsOfType<TEventType extends DomainEvent<T>>(eventType: Function): ReadonlyArray<TEventType>;
    protected trim(retroEvents: ReadonlyArray<DomainEvent<T>>): ReadonlyArray<DomainEvent<T>>;
    private serializeForSnapshot;
}
